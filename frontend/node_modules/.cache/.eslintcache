[{"C:\\Users\\tumin\\OneDrive\\Documents\\GitHub\\Weather_Web-based_App\\frontend\\src\\index.js":"1","C:\\Users\\tumin\\OneDrive\\Documents\\GitHub\\Weather_Web-based_App\\frontend\\src\\App.js":"2"},{"size":320,"mtime":1685709301004,"results":"3","hashOfConfig":"4"},{"size":10519,"mtime":1685979677618,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"188v1f5",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"C:\\Users\\tumin\\OneDrive\\Documents\\GitHub\\Weather_Web-based_App\\frontend\\src\\index.js",[],[],"C:\\Users\\tumin\\OneDrive\\Documents\\GitHub\\Weather_Web-based_App\\frontend\\src\\App.js",["13"],[],"//new with conversion\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction SearchBar({ location, setLocation, fetchWeather }) {\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      fetchWeather();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"weather_search\">\r\n      <div className=\"searchContainer\">\r\n      <input\r\n        className=\"mInput\"\r\n        type=\"text\"\r\n        id=\"location-input\"\r\n        value={location}\r\n        onChange={(event) => setLocation(event.target.value)}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n      <button className=\"mButton\" onClick={fetchWeather}>Search</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction changeBackgroundImage(weatherCondition) {\r\n  var elements = document.getElementsByClassName('content-container');\r\n\r\n  if (elements.length === 0) {\r\n    console.error(\"No elements found with class name 'myElement'.\");\r\n    return;\r\n  }\r\n\r\n  for (var i = 0; i < elements.length; i++) {\r\n    var element = elements[i];\r\n\r\n    if (weatherCondition === 'Sunny') {\r\n      element.style.backgroundImage = \"url('https://media.giphy.com/media/lyVNcb1n5Ob0Q/giphy.gif')\";\r\n    } else if (weatherCondition === 'Patchy rain possible') {\r\n      element.style.backgroundImage = \"url('https://media.giphy.com/media/xT9GEDhzERbjDD15O8/giphy.gif')\";\r\n    } else if (weatherCondition === 'Cloudy') {\r\n      element.style.backgroundImage = \"url('https://giphy.com/clips/eternalfamilytv-eternal-family-tv-the-secret-life-of-plants-1E7kahBpbcrg3PYmv8')\";\r\n    } else if (weatherCondition === 'Partly cloudy') {\r\n      element.style.backgroundImage = \"url('https://media.giphy.com/media/0Styincf6K2tvfjb5Q/giphy.gif')\";\r\n    } else if (weatherCondition === 'Overcast') {\r\n      element.style.backgroundImage = \"url('https://media.giphy.com/media/Der27bjTYm9hZEW8lk/giphy.gif')\";\r\n    } else if (weatherCondition === 'Moderate rain') {\r\n      element.style.backgroundImage = \"url('https://media.giphy.com/media/t7Qb8655Z1VfBGr5XB/giphy.gif')\";\r\n    } else if (weatherCondition === 'Heavy rain') {\r\n      element.style.backgroundImage = \"url('https://media.giphy.com/media/Der27bjTYm9hZEW8lk/giphy.gif')\";\r\n    } else if (weatherCondition === 'Moderate or heavy snow showers') {\r\n      element.style.backgroundImage = \"url('https://media.giphy.com/media/rRmBOCZDJJGU0/giphy.gif')\";\r\n    } else if (weatherCondition === 'Light snow') {\r\n      element.style.backgroundImage = \"url('https://media.giphy.com/media/7Bgpw7PwdxoDC/giphy.gif')\";\r\n    } else if (weatherCondition === 'Fog') {\r\n      element.style.backgroundImage = \"url('https://media.giphy.com/media/AIGF7ljcNKZI4/giphy.gif')\";\r\n    } else if (weatherCondition === 'Light freezing rain') {\r\n      element.style.backgroundImage = \"url('https://wifflegif.com/gifs/325665-white-out-snow-fall-gif')\";\r\n    } else if (weatherCondition === 'Clear') {\r\n      element.style.backgroundImage = \"url('https://media.giphy.com/media/gu6Wt3BmcoCDPR1wvp/giphy.gif')\";\r\n    } else {\r\n      element.style.backgroundImage = \"url('https://media.giphy.com/media/Der27bjTYm9hZEW8lk/giphy.gif')\";\r\n    }\r\n    // Add more conditions for other weather conditions as needed\r\n  }\r\n}\r\n\r\nfunction CurrentWeather({ weatherData, isCelsius }) {\r\n  changeBackgroundImage(weatherData.current.current.condition.text);\r\n\r\n  const temperature = isCelsius\r\n    ? Math.round(weatherData.current.current.temp_c)\r\n    : Math.round(weatherData.current.current.temp_f)\r\n  ;\r\n  const tempMin = isCelsius\r\n    ? Math.round(weatherData.forecast.forecast.forecastday[0].day.mintemp_c)\r\n    : Math.round(weatherData.forecast.forecast.forecastday[0].day.mintemp_f)\r\n  ;\r\n  const tempMax = isCelsius\r\n    ? Math.round(weatherData.forecast.forecast.forecastday[0].day.maxtemp_c)\r\n    : Math.round(weatherData.forecast.forecast.forecastday[0].day.maxtemp_f)\r\n  ;\r\n\r\n\r\n  return (\r\n    <div className=\"content-1\">\r\n      <h2>{weatherData.current.location.name}</h2>\r\n      <h1>\r\n        {temperature} {isCelsius ? \"°C\" : \"°F\"}\r\n      </h1>\r\n      <h3>{weatherData.current.current.condition.text}</h3>\r\n      <h4>\r\n        {tempMin} {isCelsius ? \"°C\" : \"°F\"}{\" - \"}\r\n        {tempMax} {isCelsius ? \"°C\" : \"°F\"}\r\n      </h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction HourlyWeather({ weatherData ,isCelsius}) {\r\n  const scrollContainerRef = useRef(null);\r\n  const currentHour = new Date().getHours();\r\n\r\n  const handleScroll = (event) => {\r\n    const scrollContainer = scrollContainerRef.current;\r\n    const scrollDistance = 200;\r\n\r\n    if (scrollContainer && scrollContainer.matches(\":hover\")) {\r\n      event.preventDefault();\r\n      scrollContainer.scrollLeft += event.deltaX * scrollDistance;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const scrollContainer = scrollContainerRef.current;\r\n\r\n    if (scrollContainer) {\r\n      scrollContainer.onwheel = handleScroll;\r\n    }\r\n\r\n    return () => {\r\n      if (scrollContainer) {\r\n        scrollContainer.onwheel = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"weather_hourly\">\r\n      {/* This renders hourly data for a given day */}\r\n      <div className=\"content-scroll\" ref={scrollContainerRef}>\r\n        {weatherData.forecast.forecast.forecastday[0].hour.map((hour, index) => {\r\n          const hourIndex = (currentHour + index) % 24;\r\n          const formattedHour = hourIndex.toString().padStart(2, \"0\") + \":00\";\r\n          const temperature = isCelsius\r\n          ? Math.round(hour.temp_c)\r\n          : Math.round(hour.temp_f);\r\n\r\n          return (\r\n            <div className=\"content-2\" key={hour.time}>\r\n              <h2>{formattedHour}</h2>\r\n              <img className=\"weather-icon\" src={hour.condition.icon} alt=\"\" />\r\n              <h4>\r\n              {temperature} {isCelsius ? \"°C\" : \"°F\"}\r\n              </h4>\r\n            </div>\r\n            \r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getTempColor(minTemp, maxTemp) {\r\n  if (maxTemp >= 35) {\r\n    return \"gradient-red\";\r\n  } else if (maxTemp >= 30) {\r\n    return \"gradient-orange\";\r\n  } else if (maxTemp >= 25) {\r\n    return \"gradient-yellow\";\r\n  } else if (maxTemp >= 20) {\r\n    return \"gradient-green\";\r\n  } else {\r\n    return \"gradient-lightblue\";\r\n  }\r\n}\r\n\r\nfunction DailyWeather({ weatherData,isCelsius }) {\r\n  const tempMin = isCelsius\r\n  ? Math.round(weatherData.forecast.forecast.forecastday[0].day.mintemp_c)\r\n  : Math.round(weatherData.forecast.forecast.forecastday[0].day.mintemp_f)\r\n  ;\r\n  const tempMax = isCelsius\r\n  ? Math.round(weatherData.forecast.forecast.forecastday[0].day.maxtemp_c)\r\n  : Math.round(weatherData.forecast.forecast.forecastday[0].day.maxtemp_f)\r\n;\r\n  return (\r\n    <div className=\"weather_daily\">\r\n      <ul>\r\n        {weatherData.forecast.forecast.forecastday.map((day) => (\r\n          <li key={day.date} className=\"weather_daily_card\">\r\n            <div className=\"day\">\r\n              {new Intl.DateTimeFormat(\"en-US\", { weekday: \"short\" }).format(\r\n                new Date(day.date)\r\n              )}\r\n            </div>\r\n            <div className=\"info\">\r\n              <h3>{day.day.condition.text}</h3>\r\n              <img src={getConditionIcon(day.day.condition.text)} alt=\"{day.day.condition.icon}\" />\r\n            </div>\r\n            <div className=\"temp\">\r\n              <h2> {tempMin} {isCelsius ? \"°C\" : \"°F\"}</h2>\r\n              <div className={`temp-bar ${getTempColor(day.day.mintemp_c, day.day.maxtemp_c)}`}></div>\r\n              <h2> {tempMax} {isCelsius ? \"°C\" : \"°F\"}</h2>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getConditionIcon(txt){\r\n  switch(txt){\r\n    case \"Sunny\":\r\n      return \"/images-x/sun.gif\";\r\n    case \"Patchy rain possible\":\r\n      return \"/images-x/rain.gif\";\r\n    case \"Cloudy\":\r\n      return \"/images-x/rain-cloud.gif\";\r\n    case \"Partly cloudy\":\r\n      return \"/images-x/partly-cloudy-day.gif\";\r\n    case \"Overcast\":\r\n      return \"/images-x/rain-cloud.gif\";\r\n    case \"Moderate rain\":\r\n      return \"/images-x/rainfall.gif\";\r\n    case \"Heavy rain\":\r\n      return \"/images-x/heavy-rain.gif\";\r\n    case \"Moderate or heavy snow showers\":\r\n      return \"/images-x/snow-storm.gif\";\r\n    case \"Moderate or heavy sleet\":\r\n      return \"/images-x/sleet.png\";\r\n    case \"Light snow\":\r\n      return \"/images-x/light-snow.gif\";\r\n    case \"Fog\":\r\n      return \"/images-x/fog.gif\";\r\n    case \"Light freezing rain\":\r\n      return \"/images-x/hail.png\";\r\n    default:\r\n      return \"\";}\r\n}\r\n\r\nfunction App() {\r\n  var [location, setLocation] = useState(\"\");\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [isCelsius, setIsCelsius] = useState(true); // State to track temperature unit\r\n\r\n  const WEATHER_API_CONFIG = {\r\n    apiKey: \"5a9d2c05e78649dba29133051232905\",\r\n    apiUrl: \"http://api.weatherapi.com/v1/\",\r\n  };\r\n\r\n  const fetchWeather = async () => {\r\n    if (location.trim() === \"\") {\r\n      location = \"auto:ip\";\r\n    }\r\n\r\n    const { apiKey, apiUrl } = WEATHER_API_CONFIG;\r\n    const currentApiCall = `${apiUrl}current.json?key=${apiKey}&q=${location}&aqi=no`;\r\n    const forecastApiCall = `${apiUrl}forecast.json?key=${apiKey}&q=${location}&days=10&aqi=no&alerts=no`;\r\n\r\n    try {\r\n      const [currentResponse, forecastResponse] = await Promise.all([\r\n        fetch(currentApiCall),\r\n        fetch(forecastApiCall),\r\n      ]);\r\n\r\n      const [currentData, forecastData] = await Promise.all([\r\n        currentResponse.json(),\r\n        forecastResponse.json(),  \r\n      ]);\r\n\r\n      setWeatherData({ current: currentData, forecast: forecastData });\r\n    } catch (error) {\r\n      console.log(\"Error fetching weather data:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchWeather();\r\n  }, []);\r\n    const handleToggleUnit = () => {\r\n    setIsCelsius(!isCelsius);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    <SearchBar\r\n        location={location}\r\n        setLocation={setLocation}\r\n        fetchWeather={fetchWeather}\r\n      />\r\n    <div className=\"content-container\">\r\n      <div>\r\n      <button className=\"unit-toggle\" onClick={handleToggleUnit}>\r\n        {isCelsius ? \"Switch to Fahrenheit\" : \"Switch to Celsius\"}\r\n      </button>\r\n      </div>\r\n      {weatherData && (\r\n        <div>\r\n          <CurrentWeather weatherData={weatherData} isCelsius={isCelsius} />\r\n          <HourlyWeather weatherData={weatherData} isCelsius={isCelsius} />\r\n          <DailyWeather weatherData={weatherData} isCelsius={isCelsius} />\r\n        </div>\r\n      )}\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;",{"ruleId":"14","severity":1,"message":"15","line":276,"column":6,"nodeType":"16","endLine":276,"endColumn":8,"suggestions":"17"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchWeather'. Either include it or remove the dependency array.","ArrayExpression",["18"],{"desc":"19","fix":"20"},"Update the dependencies array to be: [fetchWeather]",{"range":"21","text":"22"},[9703,9705],"[fetchWeather]"]